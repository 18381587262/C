#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<windows.h>
#include<conio.h>
#include<time.h>
#define row 9
#define col 11
char map[row][col+1]=
{
	{"*#*********"},
	{"***###*###*"},
	{"###**#****#"},
	{"*#**###**#*"},
	{"***********"},
	{"#####*##*##"},
	{"**#*****#*E"},
	{"***#*###**#"},
	{"*#*********"},
	
};
void print_map()
{
	for(int i=0;i<row;i++)
	{
		puts(map[i]);
	}
}
void show_cursor(int x,int y)
{
	COORD pos;
	pos.X=x;
	pos.Y=y;
	printf("curX=%d,curY=%d\n",x,y);
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE),pos);
}
int curX,curY;
int call()
{	
	while(1)
	{
		system("cls");
		print_map();
		show_cursor(curX,curY);
		char t=getch();
		if(t=='w')
		{
			if((curY-1)>=0 && map[curY-1][curX]=='*'||map[curY-1][curX]=='E')
				curY--;
			
		}
		else if(t=='s')
		{
			if((curY+1)<row && map[curY+1][curX]=='*'||map[curY+1][curX]=='E')
				curY++;
			
		}
		else if(t=='a')
		{
			if(curX-1>=0 && map[curY][curX-1]=='*'||map[curY][curX-1]=='E')
				curX--;
		}
		else if(t=='d')
		{
			if(curX+1>=0 && map[curY][curX+1]=='*'|| map[curY][curX+1]=='E')
				curX++;
			
		}
		if(map[curY][curX]=='E')
		{
			printf("\n\n\n\n\n");
			printf("\t!!! 双手抱头，慢慢蹲下，你被捕了\n");
			printf("\t\t重大牛皮通知\n");
			printf("\t牛马社团由于破坏公共财物，扰乱社会秩序\n");
			printf("\t已被送入牛马病监狱教育，不会再威胁社会\n");
			break;
		}
	}
	return 0;
}
struct Account
{
	char name[100];
	char idCard[19];
	char tel[12];
	char username[100];
	char password[7];
	int money;
	struct Account *next;
};
typedef struct Account Account;

Account * head=NULL;//指向头结点的指针
Account * tail=NULL;//指向尾结点的指针 
Account * curAccount=NULL;//指向当前登录账户的指针 
Account * haveAccount=NULL;
Account * otherAccount=NULL;//记录对方账户 

struct TransactionRecord
{
	char username[100];
	time_t timestamp;//时间戳 
	int type;//交易类型 0-取钱，1-存钱
	float amount;//数额 
	struct TransactionRecord * next; 
}; 
typedef struct TransactionRecord TR;

TR * trHead=NULL;
TR * trTail=NULL; 
void drawMoneyC()
{
	printf("——————————————\n");
	printf("|请输入取款金额：          |\n");
	printf("——————————————\n");
	int money;
	scanf("%d",&money);
	if(money>curAccount->money)
	{
		printf("——————————————\n");
		printf("|哦豁，余额不足!           |\n");
		printf("——————————————\n");
	}
	else
	{
		curAccount->money=curAccount->money - money;
		printf("——————————————\n");
		printf("|嘿嘿，取款成功！          |\n");
		printf("——————————————\n");
		//记录交易记录 创建结点，赋值初始化，添加结点到链表
		TR * newNode=(TR*)malloc(sizeof(TR));
		newNode->next=NULL;
		strcpy(newNode->username,curAccount->username);
		newNode->type=0;
		newNode->amount=money;
		newNode->timestamp=time(NULL);
		if(trHead==NULL)
		{
			trHead=newNode;
			trTail=newNode; 
		}
		else
		{
			trTail->next=newNode;
			trTail=newNode;
		}
	}
}
void drawMoneyE()
{
	printf("————————————————————\n");
	printf("|please enter the withdrawal amount：  |\n");
	printf("————————————————————\n");
	int money;
	scanf("%d",&money);
	if(money>curAccount->money)
	{
		printf("————————————————————————\n");
		printf("|wiyhdrawal failed due to insufficient balance |\n");
		printf("————————————————————————\n");
	}
	else
	{
		curAccount->money=curAccount->money - money;
		printf("——————————————————\n");
		printf("|withdrawal successful！           |\n");
		printf("——————————————————\n");
		//记录交易记录 创建结点，赋值初始化，添加结点到链表
		TR * newNode=(TR*)malloc(sizeof(TR));
		newNode->next=NULL;
		strcpy(newNode->username,curAccount->username);
		newNode->type=0;
		newNode->amount=money;
		newNode->timestamp=time(NULL);
		if(trHead==NULL)
		{
			trHead=newNode;
			trTail=newNode; 
		}
		else
		{
			trTail->next=newNode;
			trTail=newNode;
		}
	}
}

int findhaveAccount(char haveusername[])
{
	Account *curP=head;
	while(curP!=NULL)
	{
		if(strcmp(curP->username,haveusername)==0)
		{
			haveAccount=curP;
			return 1;
		}
		curP=curP->next;
	} 
	return 0;
}
void saveTransactionRecord()
{
	FILE* fp=fopen("D:/桌面/交易记录.txt","w");
	TR* curP=trHead;
	while(curP!=NULL)
	{
		fprintf(fp,"%s %ld %d %f\n",curP->username,curP->timestamp,curP->type,curP->amount);
		curP=curP->next;
	}
	fclose(fp);
}
void saveData()
{
	FILE* fp=fopen("D:/桌面/atm.txt","w");
	if(fp!=NULL)
	{
		Account * curP=head;
		while(curP!=NULL)
		{
			fprintf(fp,"%s %s %s %d\n",curP->name,curP->username,curP->password,curP->money);
			curP=curP->next;
		}
	}
	fclose(fp);
}
void signUpC()
{
	//申请一块堆内存空间，将其地址赋值给指针newNodeP
	Account * newNodeP=(Account *)malloc(sizeof(Account));
	
	printf("——————————————\n");
	printf("|请输入姓名:               |\n");
	printf("——————————————\n");
	scanf("%s",newNodeP->name);
	printf("——————————————\n");
	printf("|请输入身份证:             |\n");
	printf("——————————————\n");
	scanf("%s",newNodeP->idCard);
	printf("——————————————\n");
	printf("|请输入电话:               |\n");
	printf("——————————————\n");
	scanf("%s",newNodeP->tel);
	for(int m=4;m>0;m--)
	{
		printf("——————————————\n");
		printf("|请输入账号:               |\n");
		printf("——————————————\n");
		scanf("%s",newNodeP->username);
		if(findhaveAccount(newNodeP->username))
		{
			printf("——————————————\n");
			printf("|账户已存在！              |\n");
			printf("——————————————\n");
			printf("|请重新输入：              |\n");
			printf("——————————————\n");
		}
		else
		{ 
			printf("——————————————\n");
			printf("|请输入密码:               |\n");
			scanf("%s",newNodeP->password);
			printf("——————————————\n");
			newNodeP->money=0;
			newNodeP->next=NULL;
			if(head==NULL)
			{
				head=newNodeP;
				tail=newNodeP;
			}
			else
			{
				tail->next=newNodeP;
				tail=newNodeP;
			}
			
			printf("——————————————\n");
			printf("|嘿嘿，创建成功!           |\n");
			printf("——————————————\n");
			break;
		}
	}
}
void signUpE()
{
	//申请一块堆内存空间，将其地址赋值给指针newNodeP
	Account * newNodeP=(Account *)malloc(sizeof(Account));
	printf("——————————————\n");               
	printf("|Please enter your name:   |\n");
	printf("——————————————\n");
	scanf("%s",newNodeP->name);
	printf("——————————————\n");
	printf("|Please enter your idCard: |\n");
	printf("——————————————\n");
	scanf("%s",newNodeP->idCard);
	printf("——————————————\n");
	printf("|Please enter your tel:    |\n");
	printf("——————————————\n");
	scanf("%s",newNodeP->tel);
	for( int m=4;m>0;m--)
	{
		printf("——————————————\n");
		printf("|Please enter your username:|\n");
		printf("——————————————\n");
		scanf("%s",newNodeP->username);
		if(findhaveAccount(newNodeP->username))
		{
			printf("Account already exists\n");
			printf("please re-enter：");
		}
		else
		{
			printf("——————————————\n");
			printf("|Please enter your password:|\n");
			printf("——————————————\n");
			scanf("%s",newNodeP->password);
			
			newNodeP->money=0;
			newNodeP->next=NULL;
			
			if(head==NULL)
			{
				head=newNodeP;
				tail=newNodeP;
			}
			else
			{
				tail->next=newNodeP;
				tail=newNodeP;
			}
			printf("——————————————\n");
			printf("|Created successfully!     |\n");
			printf("——————————————\n");
			break;
		}
	}
}


//找到返回1，否则返回0 
int findAccount(Account a)
{
	Account *curP=head;
	while(curP!=NULL)
	{
		if((strcmp(curP->username,a.username)==0)&&(strcmp(curP->password,a.password)==0))
		{
			curAccount=curP;
			return 1;
		}
		curP=curP->next;
	} 
	return 0;
}

void updatePasswordC()
{
	char formerPassword[100]={'\0'};
	printf("——————————————\n");
	printf("|请输入旧密码：            |\n");
	printf("——————————————\n");
	scanf("%s",formerPassword);
	if(strcmp(formerPassword,curAccount->password)==0)
	{
		printf("——————————————\n");
		printf("|请输入新密码：            |\n");
		printf("——————————————\n");
		scanf("%s",curAccount->password);
		printf("——————————————\n");
		printf("|嘿嘿，修改成功！          |\n");
		printf("——————————————\n");
	}
	else
	{
		printf("——————————————\n");
		printf("|哦豁，密码错误！不能修改！|\n");
		printf("——————————————\n");
	}
}

void updatePasswordE()
{
	char formerPassword[100]={'\0'};
	printf("————————————————_——\n");
	printf("|please enter your former password：|\n");
	printf("—————————————————_—\n");
	scanf("%s",formerPassword);
	if(strcmp(formerPassword,curAccount->password)==0)
	{
		printf("—————————————————\n");
		printf("|please enter your new password：|\n");
		printf("—————————————————\n");
		scanf("%s",curAccount->password);
		printf("——————————————\n");
		printf("|Modified successfully！   |\n");
		printf("——————————————\n");
	}
	else
	{
		printf("——————————————————————————\n");
		printf("|The password is wrong and cannot be modefied！    |\n");
		printf("——————————————————————————\n");
	}
}


void saveMoneyC()
{
	printf("——————————————\n");
	printf("|请输入存款金额：          |\n");
	printf("——————————————\n");
	int money;
	scanf("%d",&money);
	if(money>curAccount->money)
	{
		curAccount->money+=money;
		printf("——————————————\n");
		printf("|嘿嘿，存款成功！          |\n");
		printf("——————————————\n");
	}
	else
	{
		printf("——————————————\n");
		printf("|哦豁，金额不符，无法存款  |\n");
		printf("——————————————\n");
	}
}
void saveMoneyE()
{
	printf("————————————————————\n");
	printf("|please enter the deposit amount：     |\n");
	printf("————————————————————\n");
	int money;
	scanf("%d",&money);
	if(money%100==0)
	{
		curAccount->money+=money;
		printf("——————————————\n");
		printf("|deposit successful！      |\n");
		printf("——————————————\n");
	}
	else
	{
		printf("—————————————————————————————\n");
		printf("|the amount does not match,so the deposit cannot be made |\n");
		printf("—————————————————————————————\n");
	}
}
int findotherAccount(char otherusername[])
{
	Account *curP=head;
	while(curP!=NULL)
	{
		if(strcmp(curP->username,otherusername)==0)
		{
			otherAccount=curP;
			return 1;
		}
		curP=curP->next;
	} 
	return 0;
}
void transferC()
{
	printf("——————————————\n");
	printf("|请输入转账账户：          |\n");
	printf("——————————————\n");
	char otherusername[100];
	scanf("%s",otherusername);
	if(findotherAccount(otherusername))
	{
		printf("——————————————\n");
		printf("|请输入转账金额：          |\n");
		printf("——————————————\n");
		int money;
		scanf("%d",&money);
		if(money<=curAccount->money&&money%100==0)
		{
			curAccount->money-=money;
			otherAccount->money+=money;
			printf("——————————————\n");
			printf("|嘿嘿，转账成功!           |\n");
			printf("——————————————\n");
			//记录交易记录 创建结点，赋值初始化，添加结点到链表
			TR * newNode=(TR*)malloc(sizeof(TR));
			
			newNode->next=NULL;
			strcpy(newNode->username,curAccount->username);
			newNode->type=0;
			newNode->amount=money;
			newNode->timestamp=time(NULL);
			
			if(trHead==NULL)
			{
				trHead=newNode;
				trTail=newNode; 
			}
			else
			{
				trTail->next=newNode;
				trTail=newNode;
			}
		}
		else if(money>curAccount->money)
		{
			printf("——————————————\n");
			printf("|哦豁，余额不足！          |\n");
			printf("——————————————\n");
		}
		else if(money%100!=0)
		{
			printf("——————————————\n");
			printf("|转账金额不符合规则！      |\n");
			printf("——————————————\n");
		}
	}
	else
	{
		printf("——————————————\n");
		printf("|账户输入错误！            |\n");
		printf("——————————————\n");
	}
}

void transferE()
{
	printf("————————————————————\n");
	printf("|please enter the transfer account：   |\n");
	printf("————————————————————\n");
	char otherusername[100];
	scanf("%s",otherusername);
	if(findotherAccount(otherusername))
	{
		printf("——————————————————\n");
		printf("|please enter the transfer amount: |\n");
		printf("——————————————————\n");
		int money;
		scanf("%d",&money);
		if(money<=curAccount->money&&money%100==0)
		{
			
			curAccount->money-=money;
			otherAccount->money+=money;
			printf("——————————————————————\n");
			printf("|transfer succeeded!                       |\n");
			printf("——————————————————————\n");
			//记录交易记录 创建结点，赋值初始化，添加结点到链表
			TR * newNode=(TR*)malloc(sizeof(TR));
			
			newNode->next=NULL;
			strcpy(newNode->username,curAccount->username);
			newNode->type=0;
			newNode->amount=money;
			newNode->timestamp=time(NULL);
			
			if(trHead==NULL)
			{
				trHead=newNode;
				trTail=newNode; 
			}
			else
			{
				trTail->next=newNode;
				trTail=newNode;
			}
		}
		else
		{
			printf("——————————————————————\n");
			printf("|Insufficient balance，unable to transfer！|\n");
			printf("——————————————————————\n");
		}
	}
	else
	{
		printf("——————————————————————\n");
		printf("|Account error！                           |\n");
		printf("——————————————————————\n");
	}
}
void printLinkedListC()
{
	printf("姓名：%s\t账户：%s\t 余额：%d\n",curAccount->name,curAccount->username,curAccount->money);	
}

void printLinkedListE()
{
	printf("name:%s\tUsername：%s\t balance：%d\n",curAccount->name,curAccount->username,curAccount->money);
}
void homePageC()
{
	while(1)
	{
		system("cls");
		printf("——————————————\n");
		printf("|请选择服务：              |\n");
		printf("——————————————\n");
		printf("|1.修改密码                |\n");
		printf("——————————————\n");
		printf("|2.存款                    |\n");
		printf("——————————————\n");
		printf("|3.取款                    |\n");
		printf("——————————————\n");
		printf("|4.转账                    |\n");
		printf("——————————————\n");
		printf("|5.查询                    |\n");
		printf("——————————————\n");
		printf("|0.返回                    |\n");
		printf("——————————————\n");
		int np;
		scanf("%d",&np);
		if(np==1)
		{
			updatePasswordC();
			system("pause");
		}
		else if(np==2)
		{
	        saveMoneyC();
	        system("pause");
		}
		else if(np==3)
		{
			drawMoneyC();
			system("pause");
		}
		else if(np==4)
		{
			transferC();
			system("pause");
		}
		else if(np==5)
			{
				printLinkedListC();
				system("pause");
			}
		else if(np==0)
		{
			break;
		}
		else
		{
			printf("——————————————\n");
			printf("|输入错误                  |\n");
			printf("——————————————\n");
		}
	}
}

void homePageE()
{
	while(1)
	{
		system("cls");
		printf("————————————————\n");
		printf("|please select a service：     |\n");
		printf("————————————————\n");
		printf("|press 1 to change the password|\n");
		printf("————————————————\n");
		printf("|deposit by 2                  |\n");
		printf("————————————————\n");
		printf("|withdraw by 3                 |\n");
		printf("————————————————\n");
		printf("|transfer by 4                 |\n");
		printf("————————————————\n");
		printf("|query by 5                    |\n");
		printf("————————————————\n");
		printf("|return by 0          	       |\n");
		printf("————————————————\n");
		int np;
		scanf("%d",&np);
		if(np==1)
		{
			updatePasswordE();
			system("pause");
		}
		else if(np==2)
		{
	        saveMoneyE();
	        system("pause");
		}
		else if(np==3)
		{
			drawMoneyE();
			system("pause");
		}
		else if(np==4)
		{
			transferE();
			system("pause");
		}
		else if(np==5)
			{
				printLinkedListE();
				system("pause");
				
			}
		else if(np==0)
		{
			break;
		}
		else
		{
			printf("——————————————\n");
			printf("|Input error               |\n");
			printf("——————————————\n");
		}
	}
}
void signInC()
{
	for(int i=0;i<3;i++)
	{
		Account a; 
		printf("——————————————\n");
		printf("|*********欢迎登录*********|\n");
		printf("——————————————\n");
		printf("|请输入账号 ：               |\n");
		printf("——————————————\n");
		scanf("%s",a.username);
		printf("——————————————\n");
		printf("|请输入密码：              |\n");
		printf("——————————————\n");
		scanf("%s",a.password);
		
		if(findAccount(a))
		{
			homePageC();
			return;
		}
		else
		{
			printf("——————————————\n");
			printf("|哦豁，登录失败!           |\n");
			printf("——————————————\n");
		}
	} 
}
void signInE()
{
	int i;
	for(i=0;i<3;i++)
	{
		Account a;
		printf("——————————————\n");
		printf("|Please enter your username: |\n");
		printf("——————————————\n");
		scanf("%s",a.username);
		printf("——————————————\n");
		printf("|Please enter your password: |\n");
		printf("——————————————\n");
		scanf("%s",a.password);
		
		if(findAccount(a)==1)
		{
			homePageE();
			return;
		}
		else
		{
			printf("——————————————\n");
			printf("|Login failed！             \n");
			printf("——————————————\n");
		}
	}
}

/**
如果数据加载成功返回1
否则返回0 
*/
int loadData()
{
	FILE* fp=fopen("D:/桌面/atm.txt","r");
	if(fp==NULL)
	{
		return 0; 
	}
	else
	{
		while(!feof(fp))
		{
			//创建结点：在堆上申请一块内存空间，将其地址赋值给指针newNodeP
			Account * newNodeP=(Account *)malloc(sizeof(Account)); 
			
			//结点赋值：结点初始化
			newNodeP->next=NULL;
			fscanf(fp,"%s %s %d\n",newNodeP->username,newNodeP->password,&newNodeP->money);
			
			//添加结点到链表
			if(head==NULL)
			{
				head=newNodeP;
				tail=newNodeP;
			}
			else
			{
				tail->next=newNodeP;
				tail=newNodeP;
			}
		}
		return 1;
	}
	fclose(fp);
}
void showMenuC()
{
	while(1) 
	{
		system("cls");
		printf("——————————————\n");
		printf("|1.开户                    |\n");
		printf("——————————————\n");
		printf("|2.登录                    |\n");
		printf("——————————————\n");
		printf("|0.返回				   |\n");
		printf("——————————————\n");
		int n;
		scanf("%d",&n);
		
		if(n==1)
		{
			signUpC();
			system("pause");
		}
		else if(n==2)
		{
			signInC();
			saveData();
			system("pause");
		}
		else if(n==0)
		{
			break;
		}
		else
		{
			printf("——————————————\n");
			printf("|哦豁，输入错误！           |");
			printf("——————————————\n");
		}
	}
}

void showMenuE()
{	
	while(1)
	{
		printf("——————————————\n");
		printf("|1.signUp                  |\n");
		printf("|2.signIn                  |\n");
		printf("|0.return                  |\n");
		int n;
		scanf("%d",&n);
		
		if(n==1)
		{
			signUpE();
			system("pause");
		}
		else if(n==2)
		{
			
			signInE();
			saveData();
			system("pause");
		}
		else if(n==0)
		{
			break;
		}
		else
		{
			printf("——————————————\n");
			printf("|Input error！               |");
			printf("——————————————\n");
		}
	}
}
int main()
{
	while(1)
	{
		printf("——————————————\n");
		printf("|*****欢迎使用黎明银行*****|\n");
		printf("——————————————\n");
		printf("|**Welcome to Liming bank**|\n");
		
		int language;
		printf("——————————————\n");
		printf("|请做出选择                |\n");
		printf("——————————————\n");
		printf("|please select a language  |\n");
		printf("——————————————\n");
		printf("|1.中文                    |\n");
		printf("——————————————\n");
		printf("|2.English                 |\n");
		printf("——————————————\n");
		printf("|3.暴富                    |\n");
		printf("——————————————\n");
		printf("|4.交易记录                |\n");
		printf("——————————————\n");
		printf("|0.退出                    |\n");
		printf("——————————————\n");
		scanf("%d",&language);
		if(language==1)
		{
			int status=loadData();
			if(status==1)
			{
				printf("——————————————\n");
				printf("|嘿嘿，加载成功！          |\n");
				printf("——————————————\n");
			    showMenuC();
			}
			else
			{
				printf("——————————————\n");
				printf("|哦豁,加载失败！           |\n"); 
				printf("——————————————\n");
			}
				
		}
		else if(language==2)
		{
			int status=loadData();
			if(status==1)
			{
				printf("——————————————\n");
				printf("|Load successful！         |\n");
				printf("——————————————\n");
				showMenuE();
			}
			else
			{
				printf("——————————————\n");
				printf("|failed to load！          |\n");
				printf("——————————————\n");
			}	
		}
		else if(language==3)
		{
			int status=loadData();
			if(status==1)
			{
				call();
				saveData();
			} 
			else
			{
				printf("——————————————\n");
				printf("|failed to load！          |\n");
				printf("——————————————\n");
			}	
		}
		else if(language==4)
			{
				printf("%d"); 
			}
		else if(language==0)
			{
				break;
			}
		else
		{
			printf("——————————————\n");
			printf("|哦豁，输入错误！          |\n");
			printf("——————————————\n");
			printf("|Input error                 |");
			printf("——————————————\n");
		}
		saveData();
		return 0;
	}
	saveTransactionRecord(); 
} 
